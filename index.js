const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, VoiceConnectionStatus } = require('@discordjs/voice');
const { token } = require('./config.json');
const playdl = require('play-dl');
const { generateDependencyReport } = require('@discordjs/voice');
console.log(generateDependencyReport());

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

let player;
let connection;
let queue = [];
let currentMessage;
let isRepeat = false;

playdl.setToken({
    youtube: { cookie: './cookies.json' }
});

client.once('ready', () => {
    console.log('Bot is online!');
});

client.on('interactionCreate', async interaction => {
    if (interaction.isCommand()) {
        const { commandName } = interaction;

        if (commandName === 'play') {
            const url = interaction.options.getString('url');
            const voiceChannel = interaction.member.voice.channel;
            if (!voiceChannel) {
                return interaction.reply('–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É!');
            }

            await interaction.deferReply();

            if (!connection) {
                connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: interaction.guild.id,
                    adapterCreator: interaction.guild.voiceAdapterCreator,
                });

                connection.on(VoiceConnectionStatus.Ready, () => {
                    console.log('–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.');
                });

                connection.on(VoiceConnectionStatus.Disconnected, () => {
                    console.log('–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.');
                    queue = [];
                    if (player) player.stop();
                    connection = null;
                });
            }

            queue.push(url);

            const buttons = createControlButtons();

            if (!currentMessage) {
                currentMessage = await interaction.followUp({
                    content: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${url}`,
                    components: buttons
                });
            } else {
                await currentMessage.edit({
                    content: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${url}`,
                    components: buttons
                });
            }

            if (queue.length === 1) {
                playSong(queue[0], interaction);
            }
        }
    } else if (interaction.isButton()) {
        const buttonId = interaction.customId;
        if (buttonId === 'play') {
            if (player) player.unpause();
            await interaction.update({ content: '–ú—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞!', components: createControlButtons() });
        } else if (buttonId === 'pause') {
            if (player) player.pause();
            await interaction.update({ content: '–ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ.', components: createControlButtons() });
        } else if (buttonId === 'stop') {
            queue = [];
            isRepeat = false;
            if (player) player.stop();
            if (connection) connection.destroy();
            connection = null;
            await interaction.update({ content: '–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.', components: [] });
            currentMessage = null;
        } else if (buttonId === 'skip') {
            if (queue.length > 1) {
                queue.shift();
                playSong(queue[0], interaction);
                await interaction.update({ content: '–ü—Ä–æ–ø—É—â–µ–Ω–æ, –∏–≥—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è.', components: createControlButtons() });
            } else {
                await interaction.update({ content: '–ë–æ–ª—å—à–µ –ø–µ—Å–µ–Ω –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.', components: createControlButtons() });
            }
        } else if (buttonId === 'back') {
            if (queue.length > 1) {
                queue.unshift(queue[queue.length - 1]);
                playSong(queue[0], interaction);
                await interaction.update({ content: '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–µ—Å–Ω–µ.', components: createControlButtons() });
            }
        } else if (buttonId === 'repeat') {
            isRepeat = !isRepeat;
            const repeatStatus = isRepeat ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
            await interaction.update({ content: `–ü–æ–≤—Ç–æ—Ä ${repeatStatus}.`, components: createControlButtons() });
        } else if (buttonId === 'queue') {
            const queueList = queue.map((song, index) => `${index + 1}. ${song}`).join('\n');
            await interaction.update({ content: `–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n${queueList}`, components: createControlButtons() });
        }
    }
});

async function playSong(url, interaction) {
    try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: ${url}`);

        const stream = await playdl.stream(url); 
        const resource = createAudioResource(stream.stream, {
            inputType: stream.type
        });

        if (!player) {
            player = createAudioPlayer();

            player.on('error', error => {
                console.error(`–û—à–∏–±–∫–∞ –≤ –ø–ª–µ–µ—Ä–µ: ${error.message}`);
            });

            player.on(AudioPlayerStatus.Idle, async () => {
                if (isRepeat) {
                    playSong(url, interaction);
                } else {
                    queue.shift();
                    if (queue.length > 0) {
                        await playSong(queue[0], interaction);
                    } else {
                        if (currentMessage) {
                            await currentMessage.edit({
                                content: '–Ω–µ—Ç—É —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏(',
                                components: []
                            });
                            currentMessage = null;
                        }
                    }
                }
            });
        }

        player.play(resource);
        connection.subscribe(player);

        const buttons = createControlButtons();
        if (currentMessage) {
            await currentMessage.edit({
                content: `–µ–±–∞—à–∏—Ç –≤ —É—à–∏: ${url}`,
                components: buttons
            });
        } else {
            currentMessage = await interaction.followUp({
                content: `–µ–±–∞—à–∏—Ç –≤ —É—à–∏ –ø—Ä—è–º —â–∞: ${url}`,
                components: buttons
            });
        }
    } catch (error) {
        console.error(`–Ω–µ –ø–æ–ª—É—á–∏—Å—å –≤—Ä—É–±–∏—Ç—å –º—É–∑–æ–Ω: ${error.message}`);
        if (currentMessage) {
            await currentMessage.edit({ content: '—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', components: [] });
        } else {
            await interaction.followUp('–¥–µ–≤–µ–ª–æ–ø–µ—Ä —Ö—É–µ—Å–æ—Å –Ω–∏—á–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
    }
}

function createControlButtons() {
    const row1 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder().setCustomId('play').setLabel('‚ñ∂Ô∏è ').setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId('pause').setLabel('‚è∏Ô∏è ').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('skip').setLabel('‚è≠Ô∏è ').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('stop').setLabel('‚èπÔ∏è ').setStyle(ButtonStyle.Danger),
            new ButtonBuilder().setCustomId('back').setLabel('‚èÆÔ∏è ').setStyle(ButtonStyle.Secondary)
        );
    
    const row2 = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder().setCustomId('repeat').setLabel('üîÅ ').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('queue').setLabel('üìú ').setStyle(ButtonStyle.Secondary)
        );

    return [row1, row2];
}

client.login(token);
